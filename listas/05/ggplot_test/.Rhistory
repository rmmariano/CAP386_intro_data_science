mosaicplot(t(tabCW),main="Class x Wilderness Area",
ylab="Class",xlab="Wilderness Area",col=colfunc(nlevels(covtype$Class)))
description <- read.csv(file="files/description.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
names <- c("Study Code", "USFS ELU Code", "Description")
names(description) <- names
soiltype = covtype["SoilType"]
head(soiltype)
class(soiltype)
description
str(description["Study Code"])
class(description["Study Code"])
for (s in soiltype){
print(s)
}
for (s in soiltype){
print(class(s))
}
for (s in soiltype){
soil_type_char = lapply(soiltype, as.character)
print(class(soil_type_char))
}
for (s in soiltype){
soil_type_char = lapply(s, as.character)
print(class(soil_type_char))
}
for (s in soiltype){
soil_type_char = lapply(s, as.character)
print(class(soil_type_char))
}
soiltype
for (s in soiltype){
#soil_type_char = lapply(s, as.character)
#print(class(soil_type_char))
print(s)
}
for (s in soiltype){
#soil_type_char = lapply(s, as.character)
#print(class(soil_type_char))
print(char(s))
}
for (s in soiltype){
#soil_type_char = lapply(s, as.character)
#print(class(soil_type_char))
print(class(s))
}
soil_type_char
for (s in soiltype){
soil_type_char = lapply(s, as.character)
print(soil_type_char)
#print(class(s))
}
for (s in soiltype){
soil_type_char = lapply(s, as.character)
#print(soil_type_char)
print(substring(soil_type_char, 2))
#print(class(s))
}
for (s in soiltype){
soil_type_char = lapply(s, as.character)
#print(soil_type_char)
print(substring(soil_type_char, 3))
#print(class(s))
}
for (s in soiltype){
soil_type_char = lapply(s, as.character)
#print(soil_type_char)
soil_type_number = substring(soil_type_char, 3)
print(soil_type_number)
#print(class(s))
}
# graphs
library(ggplot2)
library(vioplot)
# set of data
library(datasets)
library(xtable)
# default is 1000
#options(max.print=600000)
str(anscombe)
# Let's reorg them into four data frames:
anscombe1 <- data.frame(anscombe$x1,anscombe$y1)
names(anscombe1) <- c("x","y")
anscombe2 <- data.frame(anscombe$x2,anscombe$y2)
names(anscombe2) <- c("x","y")
anscombe3 <- data.frame(anscombe$x3,anscombe$y3)
names(anscombe3) <- c("x","y")
anscombe4 <- data.frame(anscombe$x4,anscombe$y4)
names(anscombe4) <- c("x","y")
anscombe1["group"] = 1
anscombe2["group"] = 2
anscombe3["group"] = 3
anscombe4["group"] = 4
tudo = rbind(anscombe1, anscombe2, anscombe3, anscombe4)
tudo
ggplot(tudo, aes(x = x, y = y))+
geom_point()+
geom_smooth()+
facet_wrap(~group)
########
covtype <- read.csv(file="files/covtype.data", header=FALSE, sep=",", stringsAsFactors=FALSE)
head(covtype, n=2)
# "Fixed" attributes' names
names <- c("Elevation","Aspect","Slope","HorDistToHydro","VertDistToHydro",
"HorDistRoad","Hillshade09","Hillshade12","Hillshade15",
"HorDistFire")
# Four binary attributes for wilderness areas:
names <- c(names,"WA_RWA","WA_NWA","WA_CPWA","WA_CLPWA")
# 40 (!) binary attributes for soil types:
names <- c(names,sprintf("ST%02d",1:40))
# The cover type
names <- c(names,"Class")
# Assign these names to the attributes
names(covtype) <- names
# Let's also assign labels to the coverage types.
covtype$Class <- as.factor(covtype$Class)
levels(covtype$Class) <- c("Spruce/Fir", "Lodgepole Pine",
"Ponderosa Pine","Cottonwood/Willow","Aspen",
"Douglas-fir","Krummholz")
# How does it looks like?
str(covtype)
countWA <- covtype$WA_RWA + covtype$WA_NWA + covtype$WA_CPWA + covtype$WA_CLPWA
paste(min(countWA),max(countWA))
soilT <- sprintf("ST%02d",1:40)
countST <- rowSums(covtype[,soilT])
paste(min(countST),max(countST))
# Which are the columns we want to consider?
searchOn <- c("WA_RWA","WA_NWA","WA_CPWA","WA_CLPWA")
# Get the index of each WA_
indexOfWA <- apply(covtype[,searchOn], 1, function(x) which(x == 1))
# Convert it to a factor with the column names we used.
factorOfWA <- factor(indexOfWA,labels = searchOn)
# Add it to the data frame
covtype$WildArea <- factorOfWA
# Drop the binary variables we don't need anymore
covtype[searchOn] <- list(NULL)
# Which are the columns we want to consider?
searchOn <- sprintf("ST%02d",1:40)
searchOn
# Get the index of 1 in ST01..ST40
indexOfST <- apply(covtype[,searchOn], 1, function(x) which(x == 1))
# Convert it to a factor with the column names we used.
factorOfST <- factor(indexOfST,labels = searchOn)
# Add it to the data frame
covtype$SoilType <- factorOfST
# Drop the binary variables we don't need anymore
covtype[searchOn] <- list(NULL)
str(covtype)
summary(covtype)
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(covtype$Elevation, main="Elevation",las=2)
boxplot(covtype$Slope, main="Slope",las=2)
boxplot(covtype$HorDistFire, main="Hor.Dist.Fire",las=2)
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(covtype$HorDistToHydro, main="Hor.Dist.Hydro",las=2)
boxplot(covtype$VertDistToHydro, main="Vert.Dist.Hydro",las=2)
boxplot(covtype$HorDistRoad, main="Hor.Dist.Road",las=2)
vioplot(covtype$HorDistToHydro,covtype$HorDistRoad,covtype$HorDistFire,
names=c("Hor.Dist.Hydro","Hor.Dist.Road","Hor.Dist.Fire"),
col="yellow")
tabSW <- table(covtype$SoilType,covtype$WildArea)
print(xtable(tabSW), type="html")
tabCW <- table(covtype$Class,covtype$WildArea)
print(xtable(tabCW), type="html")
colfunc <- colorRampPalette(c("red", "yellow","green","cyan","blue","magenta"))
mosaicplot(t(tabSW),main="Soil Type x Wilderness Area",
ylab="Soil Type",xlab="Wilderness Area",col=colfunc(nlevels(covtype$SoilType)))
mosaicplot(t(tabCW),main="Class x Wilderness Area",
ylab="Class",xlab="Wilderness Area",col=colfunc(nlevels(covtype$Class)))
description <- read.csv(file="files/description.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
names <- c("study_code", "usfs_elu_code", "description")
names(description) <- names
options(max.print=20)
soiltype = covtype["SoilType"]
soiltype
soiltype = lapply(soiltype, as.character)
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print(s)
#soil_type_number = substring(soil_type_char, 3)
#print(soil_type_number)
}
for (i in 1:NROW(soiltype)){
s = soiltype["SoilType"][i]
print(s)
#soil_type_number = substring(soil_type_char, 3)
#print(soil_type_number)
}
NROW(soiltype)
soiltype
NROW(soiltype)
soiltype = covtype["SoilType"]
soiltype
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype["SoilType"][i]
print(s)
#soil_type_number = substring(soil_type_char, 3)
#print(soil_type_number)
}
description
NROW(description)
description__ = description["description"][3]
description
description["description"]
description["description"][1]
description["description"][4]
for (j in 1:NROW(description)){
study_code__ = description["study_code"][j]
description__ = description["description"][j]
usfs_elu_code = description["usfs_elu_code"][j]
print("abelha")
print(study_code__)
#print(description__)
#print(usfs_elu_code)
}
description["description"]
description$description
description$description[1]
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print("abelha")
print(study_code__)
#print(description__)
#print(usfs_elu_code)
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print("abelha")
print(study_code__)
print(description__)
print(usfs_elu_code)
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(study_code__)
print(description__)
print(usfs_elu_code)
print("\n")
}
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print(s)
}
soiltype = covtype$SoilType  # is a factor
soiltype
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype
soiltype = covtype["SoilType"]  # is a factor
soiltype
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
for (i in 1:NROW(soiltype)){
s = soiltype$SoilType[i]
print("abc")
print(s)
}
NROW(soiltype)
options(max.print=20)
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype$SoilType[i]
print("abc")
print(s)
}
soiltype = covtype["SoilType"]  # is a factor
soiltype
soiltype = covtype$SoilType  # is a factor
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype$SoilType[i]
print("abc")
print(s)
}
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
soiltype
soiltype <- data.frame(lapply(soiltype$SoilType, as.character), stringsAsFactors=FALSE)
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype = covtype["SoilType"]  # is a factor
soiltype
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype
soiltype = covtype["SoilType"]  # is a factor
soiltype = covtype["SoilType"]  # is a factor
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
for (i in 1:NROW(soiltype)){
s = soiltype$SoilType[i]
print("abc")
print(s)
}
soiltype = covtype["SoilType"]  # is a factor
#for (s in soiltype){
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
NROW(soiltype)
i
for (i in 1:NROW(soiltype)){
#s = soiltype[i]
#print("abc")
print(i)
}
soiltype
soiltype
soiltype$SoilType
soiltype$SoilType[1]
soiltype$SoilType[4]
soiltype = covtype$SoilType  # is a factor
soiltype
covtype
soiltype = covtype$SoilType  # is a factor
soiltype
soiltype = covtype["SoilType"]  # is a factor
soiltype
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(study_code__)
print(description__)
print(usfs_elu_code)
print("\n")
}
description
covtype
covtype <- read.csv(file="files/covtype.data", header=FALSE, sep=",", stringsAsFactors=FALSE)
head(covtype, n=2)
# "Fixed" attributes' names
names <- c("Elevation","Aspect","Slope","HorDistToHydro","VertDistToHydro",
"HorDistRoad","Hillshade09","Hillshade12","Hillshade15",
"HorDistFire")
# Four binary attributes for wilderness areas:
names <- c(names,"WA_RWA","WA_NWA","WA_CPWA","WA_CLPWA")
# 40 (!) binary attributes for soil types:
names <- c(names,sprintf("ST%02d",1:40))
# The cover type
names <- c(names,"Class")
# Assign these names to the attributes
names(covtype) <- names
# Let's also assign labels to the coverage types.
covtype$Class <- as.factor(covtype$Class)
levels(covtype$Class) <- c("Spruce/Fir", "Lodgepole Pine",
"Ponderosa Pine","Cottonwood/Willow","Aspen",
"Douglas-fir","Krummholz")
# How does it looks like?
str(covtype)
countWA <- covtype$WA_RWA + covtype$WA_NWA + covtype$WA_CPWA + covtype$WA_CLPWA
paste(min(countWA),max(countWA))
soilT <- sprintf("ST%02d",1:40)
countST <- rowSums(covtype[,soilT])
paste(min(countST),max(countST))
# Which are the columns we want to consider?
searchOn <- c("WA_RWA","WA_NWA","WA_CPWA","WA_CLPWA")
# Get the index of each WA_
indexOfWA <- apply(covtype[,searchOn], 1, function(x) which(x == 1))
# Convert it to a factor with the column names we used.
factorOfWA <- factor(indexOfWA,labels = searchOn)
# Add it to the data frame
covtype$WildArea <- factorOfWA
# Drop the binary variables we don't need anymore
covtype[searchOn] <- list(NULL)
# Which are the columns we want to consider?
searchOn <- sprintf("ST%02d",1:40)
searchOn
# Get the index of 1 in ST01..ST40
indexOfST <- apply(covtype[,searchOn], 1, function(x) which(x == 1))
# Convert it to a factor with the column names we used.
factorOfST <- factor(indexOfST,labels = searchOn)
# Add it to the data frame
covtype$SoilType <- factorOfST
# Drop the binary variables we don't need anymore
covtype[searchOn] <- list(NULL)
str(covtype)
summary(covtype)
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(covtype$Elevation, main="Elevation",las=2)
boxplot(covtype$Slope, main="Slope",las=2)
boxplot(covtype$HorDistFire, main="Hor.Dist.Fire",las=2)
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(covtype$HorDistToHydro, main="Hor.Dist.Hydro",las=2)
boxplot(covtype$VertDistToHydro, main="Vert.Dist.Hydro",las=2)
boxplot(covtype$HorDistRoad, main="Hor.Dist.Road",las=2)
vioplot(covtype$HorDistToHydro,covtype$HorDistRoad,covtype$HorDistFire,
names=c("Hor.Dist.Hydro","Hor.Dist.Road","Hor.Dist.Fire"),
col="yellow")
tabSW <- table(covtype$SoilType,covtype$WildArea)
print(xtable(tabSW), type="html")
tabCW <- table(covtype$Class,covtype$WildArea)
print(xtable(tabCW), type="html")
colfunc <- colorRampPalette(c("red", "yellow","green","cyan","blue","magenta"))
mosaicplot(t(tabSW),main="Soil Type x Wilderness Area",
ylab="Soil Type",xlab="Wilderness Area",col=colfunc(nlevels(covtype$SoilType)))
mosaicplot(t(tabCW),main="Class x Wilderness Area",
ylab="Class",xlab="Wilderness Area",col=colfunc(nlevels(covtype$Class)))
description <- read.csv(file="files/description.csv", header=FALSE, sep=",", stringsAsFactors=FALSE)
names <- c("study_code", "usfs_elu_code", "description")
names(description) <- names
covtype
View(covtype)
View(covtype)
covtype
covtype$SoilType
covtype$Elevation
description
options(max.print=50)
covtype
covtype$HorDistToHydro
soiltype = covtype$SoilType  # is a factor
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
options(max.print=10)
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
soiltype
NROW(soiltype)
soiltype <- data.frame(lapply(soiltype, as.character), stringsAsFactors=FALSE)
soiltype
soiltype = covtype$SoilType  # is a factor
soiltype[] <- lapply(soiltype, as.character)
soiltype
soiltype[] <- lapply(soiltype, as.character)
soiltype
soiltype<- lapply(soiltype, as.character)
soiltype
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
print(s)
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(study_code__)
print(description__)
print(usfs_elu_code)
print("\n")
}
for (i in 1:NROW(soiltype)){
s = soiltype[i]
print("abc")
#print(s)
print(substring(s, 3))
}
for (i in 1:NROW(soiltype)){
s = soiltype[i]
s = substring(s, 3)
print("abc")
print(s)
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(study_code__)
print(description__)
print(usfs_elu_code)
print("\n")
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(as.character(study_code__))
print(description__)
print(usfs_elu_code)
print("\n")
print()
print("\n")
}
for (j in 1:NROW(description)){
study_code__ = description$study_code[j]
description__ = description$description[j]
usfs_elu_code = description$usfs_elu_code[j]
print(as.character(study_code__))
print(description__)
print(usfs_elu_code)
print("\n")
print("\n")
}
"1" == "1"
"1" == "2"
